{"name":"RaftLib","tagline":"Simple, easy to use stream computation library for C++.","body":"### Welcome to the Raft C++ template library\r\n\r\n### Current Status\r\nThe Raft library is currently an alpha release.  The API itself is relatively stable, however the back end\r\nis subject to updates.  The release is subject to the Apache Version 2.0 license. If you are checking\r\nout the code to develop, please use the main line and create pull request. If you want to \r\ndevelop applications, I suggest using one of the release branches so that you have a stable\r\ndevelopment experience. You can add applications to the main line through subsequent pull requests.\r\n\r\n### Setup\r\nTo checkout the library do the following:\r\n```\r\n$ cd location_for_the_repo\r\n$ git clone git@github.com:jonathan-beard/RaftLib.git\r\n$ mkdir build\r\n$ cd build\r\n$ cmake ../RaftLib\r\n$ make & make test\r\n$ sudo make install\r\n```\r\n\r\nThis will generate the static library file _libraft.a_.  When building an application\r\nusing the library the only header file needed is the _raft_ header.  Once the library\r\nis build you're basically set save for a few details, which will be laid out within the tutorial\r\n as we go through the example we're about to build.\r\n\r\n\r\nThe example applications are build with automatically when you ran make for the library, \r\nthey should be in the examples folder within the build directory.\r\n```\r\n$ cd build/examples\r\n```\r\n\r\n### Authors and Contributors\r\nIn 2013 Jonathan Beard (@jonathan-beard) started work on the Raft language.  In the interim,\r\nand realizing the ubiquity of the C++ language, he started work on a template library that \r\nuses the same framework as the full Raft language and run-time system.  This C++ library is \r\nthe result. Since then many have contributed to the theory and code base behind RaftLib (most\r\nnotable is my co-author (@pl53), for a full current contribution list see the GitHub stats page. \r\n\r\n### Genealogy\r\nThere have been several dozen streaming languages.  Most notable of which is probably StreaMIT.  I've worked on the Auto-Pipe streaming runtime system (both versions 1 and 2) developed at Washington University.  This particular streaming library was developed as a faster way to get started with stream processing by enabling users to stick to a language with which they are already familiar (C++).\r\n\r\n### Documentation\r\nThe main source of documentation is available on the RaftLib wiki page: https://github.com/jonathan-beard/RaftLib/wiki\r\n\r\nIf you see errors, or want to contribute please feel free to do so. \r\n\r\n### Issues\r\nPlease feel free to comment on any issues by opening an issue on our issues page: https://github.com/jonathan-beard/RaftLib/issues","google":"UA-55176313-1","note":"Don't delete this file! It's used internally to help with page regeneration."}